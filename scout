#!/usr/bin/env python
import subprocess
import sqlite3
import pandas as pd
import numpy as np
import csv
import json
import sys
import argparse
import multiprocessing as mp
import glob
import os
from functools import partial
from scout_print import *


if __name__ == "__main__":

    logdir = './scoutlog'
    #data_dir=''
    #data_dir='/home/cyliu/mini-imagenet'
    data_dir = '/tmp/imagenet/'
    # data_dir = '/tmp/ssd/dataset/ImageNetData/ImageNet_TFRecord/'
    num_gpus = 1
    num_batches = 10
    batch_size = 64
    server_protocol = 'grpc'
    variable_update = 'parameter_server'
    local_parameter_device = 'cpu'
    all_reduce_spec=None
    benchmark = []
    program = []
    program_args = []
    metric = []
    sofa_profile = []
    timeout = 200

    scout_home = os.path.dirname(sys.argv[0]) + "/"        
    print_info('SCOUT_HOME = %s' % scout_home)

    parser = argparse.ArgumentParser(description='Scout')
    parser.add_argument(
        '--data_dir', metavar="/path/to/datadir/", type=str, required=False,
                    help='path to the directory of dataset')
    parser.add_argument(
        '--logdir', metavar="/path/to/logdir/", type=str, required=False,
                    help='path to the directory of profiling log files')
    parser.add_argument('--metric', type=str, required=False, metavar='metric',
                        help='performance metric, like hotspot, memory pressure')
    parser.add_argument('--num_gpus', type=int, required=False, metavar='N',
                        help='number of GPUs')
    parser.add_argument('--num_batches', type=int, required=False, metavar='N',
                        help='number of batches (a.k.a. steps or iterations')
    parser.add_argument('--batch_size', type=int, required=False, metavar='N',
                        help='batch size (e.g. 32,64')
    parser.add_argument('--timeout', type=int, required=False, metavar='N',
                        help='timeout in seconds')
    parser.add_argument(
        'benchmark', type=str, nargs=1, metavar='<BENCHMARK_SUITE>',
            help='specify a benchmark to run: e.g. t-bench, dt-bench, s-bench, p-bench')
    # parser.add_argument('sofa-benchmark', nargs=1,
    # metavar='[record|report|preprocess|analyze|visualize]')
    parser.add_argument('program', type=str, nargs=1, metavar='<PROGRAM>')
    # parser.add_argument('program_args', type=str, nargs='*',
    # metavar='program_args')
    parser.add_argument(
        '--variable_update', type=str, required=False, metavar='METHOD',
                help='variable_update: e.g. parameter_server, replicated, distributed_all_reduce')
    parser.add_argument(
        '--local_parameter_device', type=str, required=False, metavar='METHOD',
                help='local_parameter_device: e.g. cpu,gpu')
    parser.set_defaults(local_parameter_device='cpu')
    parser.add_argument(
        '--all_reduce_spec', type=str, required=False, metavar='SPEC',
                help='all_reduce approach: e.g. nccl, xring')
    parser.add_argument(
        '--server_protocol', type=str, required=False, metavar='SPEC',
                help='server protocol to exchange parameters: e.g. grpc, grpc+verbs, grpc+gdr')
    parser.add_argument('--hierarchical_copy', dest='hierarchical_copy', action='store_true')
    parser.set_defaults(hierarchical_copy=False)
    parser.add_argument('--enable_gpu_grouping', dest='enable_gpu_grouping', action='store_true')
    parser.set_defaults(enable_gpu_grouping=False)
    parser.add_argument('--use_real_data', dest='use_real_data', action='store_true')
    parser.set_defaults(use_real_data=False)



    args = parser.parse_args()
    logdir = os.getcwd() + '/scoutlog'
    if args.logdir is not None:
        logdir = args.logdir
    if args.data_dir is not None:
        data_dir = args.data_dir
    if args.num_gpus is not None:
        num_gpus = args.num_gpus
    if args.num_batches is not None:
        num_batches = args.num_batches
    if args.batch_size is not None:
        batch_size = args.batch_size
    if args.batch_size is not None:
        timeout = args.timeout
    if args.server_protocol is not None:
        server_protocol = args.server_protocol
    
    realdata_options='--data_name=imagenet'
    if args.use_real_data:
        realdata_options = '--train_dir=/tmp/mytrain --data_name=imagenet --data_dir=%s' % (data_dir)
     
    benchmark = args.benchmark[0]
    program = args.program[0]
    metric = args.metric

    if args.variable_update is not None:       
        variable_update = args.variable_update
    if args.local_parameter_device is not None:       
        local_parameter_device = args.local_parameter_device
    
    if args.all_reduce_spec is not None:       
        all_reduce_spec = args.all_reduce_spec
    else:
        if benchmark == 'dt-bench':
            all_reduce_spec = 'pscpu'
        else:
            all_reduce_spec = 'nccl' 
 
    # program_args = args.program_args

    print(metric)
    if metric == "sofa_standard":
        sofa_profile = ['sofa', 'stat']

    print_info("SCOUT_HOME = %s" % scout_home)

    if args.use_real_data:
        subprocess.call(sofa_profile + ['rm', '-r', '/tmp/mytrain'])

    if benchmark == 'f-bench':
        print(('Execute %s' % benchmark))
        subprocess.call(['mkdir', '-p', logdir])
        if program_args is not None:
            os.chdir('f-bench')
            if program == "seq2seq":
                print("Try to run seq2seq (RNN)")
    elif benchmark == 't-bench':
        print(('Execute %s' % benchmark))
        subprocess.call(['mkdir', '-p', logdir])
        if program_args is not None:
            os.chdir(scout_home + 'benchmarks/scripts/tf_cnn_benchmarks')
            if program == "alexnet":
                subprocess.call(
                    sofa_profile + ['python', 'tf_cnn_benchmarks.py', '--model=%s' %
                                    program, '--batch_size=64', '--num_gpus=%d' %
                                    num_gpus, '--variable_update=replicated', '--local_parameter_device=gpu', '--num_batches=%s' %
                                    num_batches, realdata_options])
            if program == "vgg16":
                subprocess.call(
                    sofa_profile + ['python', 'tf_cnn_benchmarks.py', '--model=%s' %
                                    program, '--batch_size=%d'%batch_size, '--num_gpus=%d' %
                                    num_gpus, '--variable_update=replicated', '--local_parameter_device=gpu', '--num_batches=%s' %
                                    num_batches, realdata_options])
            if program == "inception3":
                subprocess.call( sofa_profile + ['python', 'tf_cnn_benchmarks.py', '--model=%s' % program, '--batch_size=%d'%batch_size, '--num_gpus=%d' % num_gpus, '--variable_update=parameter_server', '--local_parameter_device=cpu', '--num_batches=%s' % num_batches, realdata_options])

            if program == "resnet50":
                subprocess.call( sofa_profile + ['python', 'tf_cnn_benchmarks.py', '--model=%s' % program, '--batch_size=%d'%batch_size, '--num_gpus=%d' % num_gpus, '--variable_update=parameter_server', '--local_parameter_device=cpu', '--num_batches=%s' % num_batches, realdata_options])

            if program == "resnet152":
                subprocess.call(
                    sofa_profile + ['python', 'tf_cnn_benchmarks.py', '--model=%s' %
                                    program, '--batch_size=64', '--num_gpus=%d' %
                                    num_gpus, '--variable_update=parameter_server', '--local_parameter_device=cpu', '--num_batches=%s' % num_batches, realdata_options])
            
            os.chdir(sys.path[0])
    elif benchmark == 'dt-bench':
        os.chdir(scout_home + 'benchmarks/scripts/tf_cnn_benchmarks')
        print_info('Execute %s' % benchmark)
        if program.find(':') != -1:
            variable_update = program.split(':')[0]
            model = program.split(':')[1]
            print_info(
                'varible_update=%s, model=%s' %
                (variable_update, model))
            subprocess.call(
                ['python', '%s/dt-bench/dt-bench.py' % scout_home,
                            '--variable_update=%s' % variable_update,
                            '--model=%s' % model,
                            '--num_gpus=%d' % num_gpus, 
                            '--all_reduce_spec=%s' % all_reduce_spec, 
                            '--server_protocol=%s' % server_protocol,
                            '--timeout=%d' % timeout])
        else:
            print_error('format of <PROGRAM> should be like "parameter_server:alexnet"')
    elif benchmark == 'p-bench':
        os.chdir(scout_home + 'pytorch_examples/imagenet')
        print_info('Execute %s' % benchmark)
        subprocess.call('python main.py -a %s --lr 0.01 %s' % (program, data_dir), shell=True)
    elif benchmark == 'ct-bench':
        os.chdir(scout_home + 'benchmarks/scripts/tf_cnn_benchmarks')
        print(('Execute %s' % benchmark))
        subprocess.call(['mkdir', '-p', logdir])
        if program_args is not None:
            command_list = ['python', 'tf_cnn_benchmarks.py', '--model=%s' %
                program, '--batch_size=%d'%batch_size, '--num_gpus=%d' %
                num_gpus, '--variable_update=%s' % variable_update, '--local_parameter_device=%s' % args.local_parameter_device, '--num_batches=%s' %
                num_batches, '--hierarchical_copy='+ str(args.hierarchical_copy)]
            if args.all_reduce_spec != None:
                command_list.append('--all_reduce_spec=%s' % all_reduce_spec )
                
            subprocess.call(
                sofa_profile + command_list )
    else:
        print('no benchmark is specified')
