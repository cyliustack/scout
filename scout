#!/usr/bin/python
import subprocess
import sqlite3
import pandas as pd
import numpy as np
import csv
import json
import sys
import argparse
import multiprocessing as mp 
import glob, os 
from functools import partial
from scout_config import *
from scout_print import *


if __name__ == "__main__":
 
    logdir = './scoutlog'
    scout_home = os.getcwd()  
    benchmark = []
    program = []
    program_args = [] 
    metric = []
    sofa_profile = []

    parser = argparse.ArgumentParser(description='Scout')
    parser.add_argument('--logdir', metavar="/path/to/logdir/", type=str, required=False, 
                    help='path to the directory of profiling log files')
    parser.add_argument('--config', metavar="/path/to/config.cfg", type=str, required=False,
                    help='path to the directory of configuration file')
    parser.add_argument('--metric', type=str, required=False, metavar='metric',
                    help='performance metric, like hotspot, memory pressure')
    parser.add_argument('--num_gpus', type=int, required=False, metavar='n_GPUs',
                    help='number of GPUs')
    parser.add_argument('benchmark', type=str, nargs=1, metavar='<BENCHMARK_SUITE>',
            help='specify a benchmark to run: e.g. f-bench, j-bench, t-bench')
    #    parser.add_argument('sofa-benchmark', nargs=1, metavar='[record|report|preprocess|analyze|visualize]')
    parser.add_argument('program', type=str, nargs=1, metavar='<PROGRAM>')
    #parser.add_argument('program_args', type=str, nargs='*', metavar='program_args')
   
    args = parser.parse_args()
    logdir=os.getcwd()+'/scoutlog'
    if args.logdir != None:
        logdir = args.logdir
    if args.num_gpus != None:
        num_gpus = args.num_gpus
    else:
        num_gpus = 8
    
    benchmark = args.benchmark[0]
    program = args.program[0]
    metric = args.metric
    #program_args = args.program_args

    cfg = read_config(args.config)
    print metric
    if metric == "sofa_standard":
       sofa_profile = ['sofa','stat'] 


    print_info("SCOUT_HOME = %s" % scout_home )

    if benchmark == 't-bench':
        print('Execute %s'%benchmark)
        subprocess.call(['mkdir', '-p', logdir])
        if program_args != None:
            os.chdir('t-bench/scripts/tf_cnn_benchmarks')
            if program == "vgg16":
                subprocess.call(sofa_profile+['python','tf_cnn_benchmarks.py','--model=%s'%program, '--batch_size=64', '--num_gpus=%d'%num_gpus, '--variable_update=replicated', '--local_parameter_device=gpu', '--num_batches=10','--all_reduce_spec=xring'])
            if program == "resnet50":
                subprocess.call(sofa_profile+['python','tf_cnn_benchmarks.py','--model=%s'%program, '--batch_size=64', '--num_gpus=%d'%num_gpus, '--local_parameter_device=cpu', '--num_batches=10','--all_reduce_spec=nccl'])
            
            os.chdir(sys.path[0])
    if benchmark == 'dt-bench':
        print_info('Execute %s'%benchmark)
	if program.find(':') != -1:
		sync = program.split(':')[0] 
		dnn_model = program.split(':')[1]
		print_info('sync=%s, model=%s' % (sync, dnn_model) )
    		subprocess.call(['python', '%s/dt-bench/dt-bench.py'%scout_home, sync, dnn_model])
	else:
		print_error('format of <PROGRAM> should be like "ps:alexnet"')
    else:
        print('no benchmark is specified')



