#!/usr/bin/env python3
import subprocess
import argparse
import os 
import sys 

if __name__ == '__main__':
     
    default_data_dir = os.getenv("HOME")+'/mini-imagenet'
    default_ckpt_dir = 'mycheckpoint'
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', help='imagenet model name.', default='resnet50')
    parser.add_argument('--strategy', help='strategy of variable updating', default='parameter_server')
    parser.add_argument('--num_gpus', help='number of GPUs used', default=1, type=int)
    parser.add_argument('--data_dir', help='path to directory containing training dataset', default=default_data_dir)
    parser.add_argument('--ckpt_dir', help='path to checkpoint directory', default=default_ckpt_dir)
    parser.add_argument('--num_batches', help='number of batches (a.k.a. steps or iterations', type=int, default=10)
    parser.add_argument('--batch_size', help='batch size per device (e.g. 32,64)', type=int, default=64)
    parser.add_argument('--synthetic', help='enable synthetic data', action='store_true')
    args = parser.parse_args()

    if args.synthetic:
        flag_data_dir = '' 
    else:    
        flag_data_dir = '--data_dir=' + args.data_dir

    os.chdir(sys.path[0] + '/benchmarks/scripts/tf_cnn_benchmarks/')
    subprocess.call('rm -rf %s' % args.ckpt_dir, shell=True)
    subprocess.call('python tf_cnn_benchmarks.py --data_format=NCHW --batch_size=%d \
    --model=%s --optimizer=sgd --local_parameter_device=cpu --variable_update=%s \
    --nodistortions --gradient_repacking=8 --num_gpus=%d \
    --num_batches=%d --num_warmup_batches=10 --weight_decay=1e-4 --data_name=imagenet %s \
    --train_dir=%s ' % (args.batch_size, args.model, args.strategy, args.num_gpus, args.num_batches, flag_data_dir, args.ckpt_dir), shell=True)
